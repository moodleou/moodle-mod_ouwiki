{"version":3,"file":"edit.min.js","sources":["../src/edit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\nimport {getString} from 'core/str';\nimport Notification from 'core/notification';\nimport Config from 'core/config';\nimport Pending from 'core/pending';\nimport * as FormChangeChecker from 'core_form/changechecker';\n\n/**\n * JavaScript to handle ouwiki.\n *\n * @module mod_ouwiki/edit\n * @copyright 2024 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nclass Edit {\n    /**\n     * Constructor for the Edit class.\n     * @param {number} contextId The context ID for validation.\n     */\n    constructor(contextId) {\n        this.contextId = contextId;\n        this.init();\n    }\n\n    /**\n     * Initialize the Edit class by loading strings and attaching events.\n     */\n    init() {\n        const btns = document.querySelectorAll('#id_savechanges, #id_preview');\n        btns.forEach((btn) => {\n            btn.addEventListener('click', (e) => {\n                this.handleButtonClick(e, btns);\n            });\n        });\n    }\n\n    /**\n     * Check the save response for success and handle failure if necessary.\n     *\n     * @param {XMLHttpRequest} response The XMLHttpRequest response\n     * @param {Event} e The click event\n     * @param {NodeList} btns The list of save buttons\n     */\n    checkSave = (response, e, btns) => {\n        if (response.responseText.search('ok') === -1) {\n            // Send save failed due to login/session error.\n            this.saveFail('savefailsession', response.responseText, btns);\n        } else {\n            // If the response is OK, allow form submission.\n            const form = e.target.closest('form');\n            if (form) {\n                // Add a hidden input to simulate the clicked button.\n                const clickedButton = e.target;\n                if (clickedButton.name) {\n                    const hiddenInput = document.createElement('input');\n                    hiddenInput.type = 'hidden';\n                    hiddenInput.name = clickedButton.name;\n                    hiddenInput.value = clickedButton.value;\n                    form.appendChild(hiddenInput);\n                }\n\n                // Manually submit the form.\n                FormChangeChecker.disableAllChecks();\n                form.requestSubmit(e.target);\n            }\n        }\n    };\n\n    /**\n     * Handle network or timeout failures for save request.\n     *\n     * @param {Error} error - The error object\n     * @param {NodeList} btns - The list of save buttons\n     */\n    checkFailure = (error, btns) => {\n        this.saveFail('savefailnetwork', error.statusText, btns);\n    };\n\n    /**\n     * Send an XMLHttpRequest to verify session status.\n     *\n     * @param {Function} onSuccess Callback function on successful response\n     * @param {Function} onFailure Callback function on error/timeout\n     */\n    sendCheckRequest = (onSuccess, onFailure) => {\n        const xhr = new XMLHttpRequest();\n        const params = `sesskey=${Config.sesskey}&contextid=${this.contextId}`;\n        xhr.open('POST', 'confirmloggedin.php', true);\n        xhr.timeout = 30000;\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === XMLHttpRequest.DONE) {\n                if (xhr.status === 200) {\n                    onSuccess(xhr);\n                } else {\n                    onFailure(xhr);\n                }\n            }\n        };\n\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        xhr.send(params);\n    };\n\n    /**\n     * Handle the click event of save buttons.\n     *\n     * @param {Event} e The click event\n     * @param {NodeList} btns The list of save buttons\n     */\n    handleButtonClick = (e, btns) => {\n        e.preventDefault();\n        const pendingPromise = new Pending('mod/ouwiki:savecheck');\n        this.sendCheckRequest(\n            (response) => {\n                this.checkSave(response, e, btns);\n                pendingPromise.resolve();\n            },\n            (error) =>  {\n                this.checkFailure(error, btns);\n                pendingPromise.resolve();\n            }\n        );\n    };\n\n    /**\n     * Handle save failure scenario by displaying an alert and disabling buttons.\n     *\n     * @param {string} stringName The name of the failure string\n     * @param {string} info Additional info for the alert\n     * @param {NodeList} btns The list of save buttons\n     */\n    saveFail = async(stringName, info, btns) => {\n        let content = await getString('savefailtext', 'ouwiki', await getString(stringName, 'ouwiki'));\n        content += `[${info}]`;\n\n        btns.forEach(btn => {\n            btn.disabled = true;\n        });\n\n        Notification.alert(await getString('savefailtitle', 'ouwiki'), content);\n        const cancel = document.querySelector('#id_cancel');\n        if (cancel) {\n            cancel.addEventListener('click', () => {\n                const form = document.querySelector('.region-content .mform');\n                if (form) {\n                    const text = form.querySelector('#fitem_id_message');\n                    const attach = form.querySelector('#fitem_id_attachments');\n                    if (text) {\n                        text.remove();\n                    }\n                    if (attach) {\n                        attach.remove();\n                    }\n                    form.method = 'get';\n                }\n            });\n        }\n    };\n}\n\nexport const init = (contextId) => {\n    return new Edit(contextId);\n};\n"],"names":["_getRequireWildcardCache","e","WeakMap","r","t","_interopRequireDefault","__esModule","default","_notification","_config","_pending","FormChangeChecker","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","Edit","constructor","contextId","this","init","btns","document","querySelectorAll","forEach","btn","addEventListener","handleButtonClick","checkSave","response","responseText","search","saveFail","form","target","closest","clickedButton","name","hiddenInput","createElement","type","value","appendChild","disableAllChecks","requestSubmit","checkFailure","error","statusText","sendCheckRequest","onSuccess","onFailure","xhr","XMLHttpRequest","params","Config","sesskey","open","timeout","onreadystatechange","readyState","DONE","status","setRequestHeader","send","preventDefault","pendingPromise","Pending","resolve","async","stringName","info","content","getString","disabled","Notification","alert","cancel","querySelector","text","attach","remove","method","_exports"],"mappings":"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"}