{"version":3,"file":"edit.min.js","sources":["../src/edit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\nimport {getString} from 'core/str';\nimport Notification from 'core/notification';\nimport Config from 'core/config';\nimport Pending from 'core/pending';\n\n/**\n * JavaScript to handle ouwiki.\n *\n * @module mod_ouwiki/edit\n * @copyright 2024 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nclass Edit {\n    /**\n     * Constructor for the Edit class.\n     * @param {number} contextId The context ID for validation.\n     */\n    constructor(contextId) {\n        this.contextId = contextId;\n        this.init();\n    }\n\n    /**\n     * Initialize the Edit class by loading strings and attaching events.\n     */\n    init() {\n        const btns = document.querySelectorAll('#id_savechanges, #id_preview');\n        btns.forEach((btn) => {\n            btn.addEventListener('click', (e) => {\n                this.handleButtonClick(e, btns);\n            });\n        });\n    }\n\n    /**\n     * Check the save response for success and handle failure if necessary.\n     *\n     * @param {XMLHttpRequest} response The XMLHttpRequest response\n     * @param {Event} e The click event\n     * @param {NodeList} btns The list of save buttons\n     */\n    checkSave = (response, e, btns) => {\n        if (response.responseText.search('ok') === -1) {\n            // Send save failed due to login/session error.\n            this.saveFail('savefailsession', response.responseText, btns);\n        } else {\n            // If the response is OK, allow form submission.\n            const form = e.target.closest('form');\n            if (form) {\n                // Add a hidden input to simulate the clicked button.\n                const clickedButton = e.target;\n                if (clickedButton.name) {\n                    const hiddenInput = document.createElement('input');\n                    hiddenInput.type = 'hidden';\n                    hiddenInput.name = clickedButton.name;\n                    hiddenInput.value = clickedButton.value;\n                    form.appendChild(hiddenInput);\n                }\n\n                // Manually submit the form.\n                form.submit();\n            }\n        }\n    };\n\n    /**\n     * Handle network or timeout failures for save request.\n     *\n     * @param {Error} error - The error object\n     * @param {NodeList} btns - The list of save buttons\n     */\n    checkFailure = (error, btns) => {\n        this.saveFail('savefailnetwork', error.statusText, btns);\n    };\n\n    /**\n     * Send an XMLHttpRequest to verify session status.\n     *\n     * @param {Function} onSuccess Callback function on successful response\n     * @param {Function} onFailure Callback function on error/timeout\n     */\n    sendCheckRequest = (onSuccess, onFailure) => {\n        const xhr = new XMLHttpRequest();\n        const params = `sesskey=${Config.sesskey}&contextid=${this.contextId}`;\n        xhr.open('POST', 'confirmloggedin.php', true);\n        xhr.timeout = 30000;\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === XMLHttpRequest.DONE) {\n                if (xhr.status === 200) {\n                    onSuccess(xhr);\n                } else {\n                    onFailure(xhr);\n                }\n            }\n        };\n\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        xhr.send(params);\n    };\n\n    /**\n     * Handle the click event of save buttons.\n     *\n     * @param {Event} e The click event\n     * @param {NodeList} btns The list of save buttons\n     */\n    handleButtonClick = (e, btns) => {\n        e.preventDefault();\n        const pendingPromise = new Pending('mod/ouwiki:savecheck');\n        this.sendCheckRequest(\n            (response) => {\n                this.checkSave(response, e, btns);\n                pendingPromise.resolve();\n            },\n            (error) =>  {\n                this.checkFailure(error, btns);\n                pendingPromise.resolve();\n            }\n        );\n    };\n\n    /**\n     * Handle save failure scenario by displaying an alert and disabling buttons.\n     *\n     * @param {string} stringName The name of the failure string\n     * @param {string} info Additional info for the alert\n     * @param {NodeList} btns The list of save buttons\n     */\n    saveFail = async(stringName, info, btns) => {\n        let content = await getString('savefailtext', 'ouwiki', await getString(stringName, 'ouwiki'));\n        content += `[${info}]`;\n\n        btns.forEach(btn => {\n            btn.disabled = true;\n        });\n\n        Notification.alert(await getString('savefailtitle', 'ouwiki'), content);\n        const cancel = document.querySelector('#id_cancel');\n        if (cancel) {\n            cancel.addEventListener('click', () => {\n                const form = document.querySelector('.region-content .mform');\n                if (form) {\n                    const text = form.querySelector('#fitem_id_message');\n                    const attach = form.querySelector('#fitem_id_attachments');\n                    if (text) {\n                        text.remove();\n                    }\n                    if (attach) {\n                        attach.remove();\n                    }\n                    form.method = 'get';\n                }\n            });\n        }\n    };\n}\n\nexport const init = (contextId) => {\n    return new Edit(contextId);\n};\n"],"names":["Edit","constructor","contextId","response","e","btns","responseText","search","saveFail","form","target","closest","clickedButton","name","hiddenInput","document","createElement","type","value","appendChild","submit","error","statusText","onSuccess","onFailure","xhr","XMLHttpRequest","params","Config","sesskey","this","open","timeout","onreadystatechange","readyState","DONE","status","setRequestHeader","send","preventDefault","pendingPromise","Pending","sendCheckRequest","checkSave","resolve","checkFailure","async","stringName","info","content","forEach","btn","disabled","alert","cancel","querySelector","addEventListener","text","attach","remove","method","init","querySelectorAll","handleButtonClick"],"mappings":";;;;;;;8NA6BMA,KAKFC,YAAYC,6CAwBA,CAACC,SAAUC,EAAGC,YACsB,IAAxCF,SAASG,aAAaC,OAAO,WAExBC,SAAS,kBAAmBL,SAASG,aAAcD,UACrD,OAEGI,KAAOL,EAAEM,OAAOC,QAAQ,WAC1BF,KAAM,OAEAG,cAAgBR,EAAEM,UACpBE,cAAcC,KAAM,OACdC,YAAcC,SAASC,cAAc,SAC3CF,YAAYG,KAAO,SACnBH,YAAYD,KAAOD,cAAcC,KACjCC,YAAYI,MAAQN,cAAcM,MAClCT,KAAKU,YAAYL,aAIrBL,KAAKW,mDAWF,CAACC,MAAOhB,aACdG,SAAS,kBAAmBa,MAAMC,WAAYjB,kDASpC,CAACkB,UAAWC,mBACrBC,IAAM,IAAIC,eACVC,yBAAoBC,gBAAOC,8BAAqBC,KAAK5B,WAC3DuB,IAAIM,KAAK,OAAQ,uBAAuB,GACxCN,IAAIO,QAAU,IAEdP,IAAIQ,mBAAqB,KACjBR,IAAIS,aAAeR,eAAeS,OACf,MAAfV,IAAIW,OACJb,UAAUE,KAEVD,UAAUC,OAKtBA,IAAIY,iBAAiB,eAAgB,qCACrCZ,IAAIa,KAAKX,qDASO,CAACvB,EAAGC,QACpBD,EAAEmC,uBACIC,eAAiB,IAAIC,iBAAQ,6BAC9BC,kBACAvC,gBACQwC,UAAUxC,SAAUC,EAAGC,MAC5BmC,eAAeI,aAElBvB,aACQwB,aAAaxB,MAAOhB,MACzBmC,eAAeI,iDAYhBE,MAAMC,WAAYC,KAAM3C,YAC3B4C,cAAgB,kBAAU,eAAgB,eAAgB,kBAAUF,WAAY,WACpFE,oBAAeD,UAEf3C,KAAK6C,SAAQC,MACTA,IAAIC,UAAW,2BAGNC,YAAY,kBAAU,gBAAiB,UAAWJ,eACzDK,OAASvC,SAASwC,cAAc,cAClCD,QACAA,OAAOE,iBAAiB,SAAS,WACvB/C,KAAOM,SAASwC,cAAc,6BAChC9C,KAAM,OACAgD,KAAOhD,KAAK8C,cAAc,qBAC1BG,OAASjD,KAAK8C,cAAc,yBAC9BE,MACAA,KAAKE,SAELD,QACAA,OAAOC,SAEXlD,KAAKmD,OAAS,kBArIrB1D,UAAYA,eACZ2D,OAMTA,aACUxD,KAAOU,SAAS+C,iBAAiB,gCACvCzD,KAAK6C,SAASC,MACVA,IAAIK,iBAAiB,SAAUpD,SACtB2D,kBAAkB3D,EAAGC,2BAiIrBH,WACV,IAAIF,KAAKE"}